{ns zen.require-test

 import #{zen.test}

 basic-require
 {:zen/tags #{zen/schema}
  :type zen/map
  :require #{:foo :bar}
  :values {:type zen/any}}

 or-require
 {:zen/tags #{zen/schema}
  :type zen/map
  :require #{#{:foo :bar}}
  :values {:type zen/any}}

 nested-require
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:attr {:type zen/map
                :require #{#{:foo :bar}}
                :values {:type zen/any}}}}

 a-require
 {:zen/tags #{zen/schema}
  :type zen/map
  :require #{:a}
  :values {:type zen/any}}

 b-require
 {:zen/tags #{zen/schema}
  :type zen/map
  :require #{:b}
  :values {:type zen/any}}

 ab-require
 {:zen/tags #{zen/schema}
  :confirms #{a-require b-require}}

 basic-require-test
 {:zen/tags #{zen.test/case}
  :title ":require"
  :steps
  [{:desc "Empty data"
    :do {:type zen.test/validate :schema basic-require :data {}}
    :match {:errors [{:path [:bar]
                      :type "require"
                      :schema [basic-require :require]}
                     {:path [:foo]
                      :type "require"
                      :schema [basic-require :require]}]}}

   {:desc "foo key missed"
    :do {:type zen.test/validate :schema basic-require :data {:bar 1}}
    :match {:errors [{:path [:foo]
                      :type "require"
                      :schema [basic-require :require]}
                     zen.test/nil?]}}

   {:desc "bar key missed"
    :do {:type zen.test/validate :schema basic-require :data {:foo 1}}
    :match {:errors [{:path [:bar]
                      :type "require"
                      :schema [basic-require :require]}
                     zen.test/nil?]}}

   {:desc "Valid data"
    :do {:type zen.test/validate
         :schema basic-require
         :data {:foo "foo" :bar "bar"}}
    :match {:errors zen.test/empty?}}

   {:desc "require or"
    :do {:type zen.test/validate
         :schema or-require
         :data {:foo "foo" :bar "bar"}}
    :match {:errors zen.test/empty?}}

   {:desc "or - :foo key"
    :do {:type zen.test/validate
         :schema or-require
         :data {:foo "foo"}}
    :match {:errors zen.test/empty?}}

   {:desc "or - :bar key"
    :do {:type zen.test/validate
         :schema or-require
         :data {:bar "bar"}}
    :match {:errors zen.test/empty?}}

   {:desc "or - no keys"
    :do {:type zen.test/validate
         :schema or-require
         :data {:some "ups"}}
    :match {:errors [{:type "require"
                      :schema [or-require :require]
                      :path zen.test/empty?}]}}

   {:desc "nested require"
    :do {:type zen.test/validate
         :schema nested-require
         :data {}}
    :match {:errors zen.test/empty?}}

   {:desc "nested require"
    :do {:type zen.test/validate
         :schema nested-require
         :data {:attr {:some ""}}}
    :match {:errors [{:type "require"
                      :schema [nested-require :keys :attr :require]
                      :path [:attr]}]}}

   {:desc "require & confirms - fail on empty data"
    :do {:type zen.test/validate
         :schema ab-require
         :data {}}
    :match {:errors
            [{:type "require",
              :path [:a],
              :schema [zen.require-test/ab-require :confirms a-require :require]}
             {:type "require",
              :path [:b],
              :schema [zen.require-test/ab-require :confirms b-require :require]}
             ]}}

   {:desc "require & confirms"
    :do {:type zen.test/validate
         :schema ab-require
         :data {:a "a"
                :b "b"}}
    :match {:errors zen.test/empty?}}
   ]}}
