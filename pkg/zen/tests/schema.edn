{ns zen.tests.schema

 test-case {:zen/tags #{zen/schema}
            :type zen/map
            :keys {:title {:type zen/string}
                   :schema {:type zen/map :confirms #{zen/schema}}
                   :cases
                   {:type zen/map
                    :key {:type zen/keyword}
                    :values {:type zen/map
                             :keys {:example {:type zen/any}
                                    :valid  {:type zen/boolean}
                                    :result {:type zen/map :confirms #{zen/schema-errors}}}}}}}

 valid-schemas {:zen/tags #{test-case}
                :title "Valid schemas"
                :schema {:confirms #{zen/schema}}
                :cases {:simple-require {:valid true :example {:type zen/map :require #{:a :b :c}}}
                        :require-with-or {:valid true :example {:type zen/map :require #{:a #{:b :c}}}}}}

 str {:zen/tags #{test-case}
      :title "Test zen/string"
      :schema {:type zen/string :minLength 2 :maxLength 5 :regex ".*@.*"}
      :cases {:simple {:example "a@b" :valid true}
              :regex  {:example "a*b"
                       :result [{:message "Expected match /.*@.*/, got \"a*b\"", :type "string.regex" :path [], :schema [:regex]}]}
              :minLength {:example "@"
                          :result
                          [{:message "Expected length >= 2, got 1", :type "string.minLength", :path [], :schema [:minLength]}]}
              :maxLength {:example "aaa@aaa"
                          :result
                          [{:message "Expected length <= 5, got 7", :type "string.maxLength" :schema [:maxLength]}]}}}

 map-require {:zen/tags #{test-case}
              :title "Test zen/map require"
              :schema {:type zen/map
                       :require #{:a #{:b :c} :d}
                       :keys {:a {:type zen/string}
                              :b {:type zen/string}
                              :c {:type zen/string}
                              :d {:type zen/string}}}
              :cases {:simple {:example {:a "a" :b "b" :d "c"} :valid true}
                      :missed-or {:example {:a "a" :d "d"}
                                  :result [{:message "one of keys #{:c :b} is required",          
                                            :type "map.require",
                                            :path [],
                                            :schema [:require]}]}}}
 map-exclusive-keys {:zen/tags #{test-case}
                     :title "Test zen/map exclusive keys"
                     :schema {:type zen/map
                              :exclusive-keys #{#{:a :b} #{:b #{:c :d}}}
                              :keys {:a {:type zen/string}
                                     :b {:type zen/string}
                                     :c {:type zen/string}
                                     :d {:type zen/string}}}
                     :cases {:simple {:example {:a "a" :c "c" :d "d"} :valid true}
                             :set-of {:example {:b "b"} :valid true}
                             :invalid-1 {:example {:a "a" :b "b"}
                                         :result [{:message "Expected only one of keyset :b or :a, but present (:b :a)",          
                                                   :type "map.exclusive-keys",
                                                   :schema [:exclusive-keys]}]}
                             :invalid-2 {:example {:b "b" :c "c"}
                                         :result [{:message "Expected only one of keyset #{:c :d} or :b, but present (:c :b)",
                                                   :type "map.exclusive-keys",
                                                   :schema [:exclusive-keys]}]}}
                     }
 test-valueset {:zen/tags #{zen/schema}
                :type zen/map
                :keys {:values {:type zen/vector
                                :every {:type zen/map :keys {:code {:type zen/string} :display {:type zen/string}}}}}}

 test-valueset-1 {:zen/tags #{zen/valueset test-valuest}
                  :values [{:code "a1" :display "A1"}
                           {:code "a2" :display "A2"}]}
 test-valueset-2 {:zen/tags #{zen/valueset test-valuest}
                  :values [{:code "b1" :display "B1"}
                           {:code "b2" :display "B2"}]}
 valueset-example {:zen/tags #{test-case}
                   :schema {:type zen/string
                            :valuesets #{{:name test-valueset-1 :key :code}
                                         {:name test-valueset-2 :key :code}}}
                   :cases {:valid-a {:example "a1" :valid true}
                           :valid-b {:example "b1" :valid true}
                           :invalid {:example "c1"
                                     :result [{:type "valuesets",
                                               :message "None of valuests #{zen.tests.schema/test-valueset-1 zen.tests.schema/test-valueset-2} is matched for 'c1'",
                                               :path []}]}}}

 mytag {:zen/tags #{zen/tag}}
 mysym {:zen/tags #{mytag}}

 list-example {:zen/tags #{test-case}
               :schema {:type zen/list
                        :nth {0 {:type zen/symbol :tags #{mytag}}}}
               :cases {:valid-list {:example (zen.tests.schema/mysym :b :c) :valid true}
                       :invalid-list {:example (:ups :b :c)
                                      :result [{:message "Expected type of 'symbol, got 'keyword", :type "primitive-type", :path [0], :schema [:nth 0]}]}
                       :invalid-list-2 {:example (ups/ups :b :c)
                                        :result [{:message "Expected symbol 'ups/ups tagged with '#{zen.tests.schema/mytag}, but only #{}", :type "symbol", :path [0], :schema [:nth 0 :tags]}]}}}

 extract-fns {:zen/tags #{zen/tag}}

 myfn {:zen/tags #{zen/fn extract-fns}
       :args {:type zen/vector :every {:type zen/keyword}}
       :ret {:type zen/any}}

 fn-example {:zen/tags #{test-case}
             :title "Test zen/fn & zen/apply"
             :schema {:zen/tags #{zen/schema zen/tag}
                      :type zen/map
                      :keys {:path {:type zen/apply :tags #{extract-fns}}}}

             :cases {:valid {:example {:path (zen.tests.schema/myfn :a :b :c)} :valid true}}}

 }
